# Game engine 21

- 3d block-based world
  - play mostly in one plane
  - depth broken into parallax layers in predetermined places
  - multi-tile entities
  - variable-sized rooms w/ neighbors a la D4
- compressed JSON for storage
  - world stored as a hash tre
    - indirect references (using UUIDs and sequential IDs)
      between most objects
    - tree maps as dictionaries f
- BUILD A NICE 2.5D TILE EDITOR
  - block references 'visual representation'
  - visual representation indicates shape ID and material map ID
  - shape indicates heightfield and material map indexes for each pixel
    - 4 'stain' variations on each material for minor color variation
  - edit one sprite sheet at a time, export to blocks
  - no need to pre-bake transformations
  - allow editing milti-tile images to define related tiles such as pipes
- auto-generated data classes (if any), [de]serialization routines
  - NO BEHAVIOR defined by data classes!




Inspirational tunes:
Sinespree-Groove2-04mix.mp3


## Networking as part of the game

World may be distributed across multiple servers.

Each room is part of a room group; each room group is simulated on its own [virtual] roomgroup server.

Links between rooms of different groups may introduce additional latency and look special in the game.
Players, resources, signals, etc, can pass through these portals just as they would pass anywhere else, but with potential for lots of latency.

When moving physical objects between room groups, a transaction occurs:
- Group A sends request to group B asking if object may move into a spot.
- Group B sends accept/reject response and adds the object on their end if move was successful.
- If successful, group A removes the object.

All steps are recorded in the a transaction log unique to the two room groups.
Or just use TCP (or some reliable stream abstraction) between them for the same effect.
If a connection is lost while negotiating, who knows.  Impossible to know if it went through or not.

Things that don't require transatons (can be sent via UDP):
- Updates on objects within rooms at the border of a group may be broadcast to adjacent roomgroup servers.
- Signal transmission (since signals are unreliable anyway).
- Unimportant physical objects, e.g. debris; group A will remove it regardless


To reduce latency, roomgroups may have uplink points within them that
players can use.

An 'uplink' port, by definition, allows you to connect to a network
closer to the player, e.g. the same network the roomgroup servers use
to communicate with each other, which may itself be the Internet.
How that wiring is done may also be ad-hoc and customizable
(maybe even defined by data pipes in another roomgroup! XD).

At beginning of game, there should an uplink point connected to a
long-range wireless router so that players don't need to build a bunch
of infrastructure right away.  To move into distant areas requires
autonomous robots or networking

### Initial proof-of-concept

Use WebRTC to message between roomgroup servers running in multiple tabs.
Player can be in their own tab.


## Railroad tracks

Required because trains are awesome.

Tracks would be implemented as a bunch of track pieces.

Each track piece has a start and end point with a forward vector and
an 'up' vector (a single game object may have multiple track pieces).

Track curveature is assumed to be constant within a single track piece.

Two track pieces are joined when their endpoints match exactly.

Train wheels pivot to follow tracks and cars' orientation are calculated accordingly.

Train cars may indicate maximum inward/outward curveature of track
(outside of which car will collide with track),
or maybe the regular physics calculations will handle that.

Tracks can act as conduit for a number of cables and pieces can
provide connection points for them:
- Rail control wires
  - Track power (controls train speed and direction)
  - Train sensing (indicates whether or not any trains are on a segment)
- Not related to the rails, but purely as a conduit for:
  - Power
  - Data (i.e. Ethernet)
  - Any other wires you want to stick in there
